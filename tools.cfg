[gcode_macro T0]
gcode:
    {% if printer.toolhead.extruder == "extruder1" %}
        SET_PIN PIN=switch VALUE=0
        # Компенсировать оффсет по Z
        # Компенсировать оффсет по Y
        SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=1 MOVE_SPEED=80
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder

[gcode_macro T1]
gcode:
    {% set file = printer.save_variables.variables %}
    {% set t1_z_offset = printer['gcode_macro GLOBAL'].t1_z_offset %}
    {% set x_offset = file.variable_nozzles_offset[0] %}
    {% set y_offset = file.variable_nozzles_offset[1] %}
    {% if printer.toolhead.extruder == "extruder" %}
        SET_PIN PIN=switch VALUE=1
        SET_GCODE_OFFSET X={x_offset} Y={y_offset} Z={t1_z_offset} MOVE=1 MOVE_SPEED=80
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1

[gcode_macro SEARCH_NOZZLES]
gcode:
    {% set global = printer['gcode_macro GLOBAL'] %}
    {% set file = printer.save_variables.variables %}
    {% set homing_pos_x = global.homing_pos_x %}
    {% set homing_pos_y = global.homing_pos_y %}
    {% set t0_z_offset = file.t0_z_offset %}
    G1 X{homing_pos_x} Y{homing_pos_y} Z5
    _MEASURE_OFFSET
    _SET_OFFSET

[gcode_macro _MEASURE_OFFSET]
gcode:
    T0
    G28 Z
    T1
    PROBE

[gcode_macro _SET_OFFSET]
gcode:
    RESPOND MSG='{printer.probe.last_query}'
    RESPOND MSG='T1 Z offset={printer.probe.last_z_result}'
    SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=t1_z_offset VALUE='{printer.probe.last_z_result}'

[gcode_macro _GET_OFFSET]
gcode:
    {% set t1_z_offset = printer['gcode_macro GLOBAL'].t1_z_offset %}
    RESPOND MSG='{t1_z_offset}'

    # Компенсация высоты сопел при переключении
    # {% set t1_z_offset = printer["gcode_macro GLOBAL"] %}
    # SET_GCODE_OFFSET Z={t1_z_offset} MOVE=1 MOVE_SPEED=15




[gcode_macro PRINT_PREPARE]
gcode:
    FORCE_MOVE STEPPER=stepper_z DISTANCE=5 VELOCITY=15
    G28 Y
    G1 Y180
    G28 X
    G1 X110
    G28 Z
    G1 Z10



[gcode_macro LZ]
gcode:
    RESPOND MSG="{printer.gcode_move.position.z}"
    RESPOND MSG="{printer.probe.last_z_min}"

[gcode_macro SAVE_T1_PARK_POSITION]
gcode:
    {% set global = printer["gcode_macro GLOBAL"] %}
    {% if 'x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes%} # Проверяем известно ли положение осей XY и выбран ли экструдер
    SAVE_VARIABLE VARIABLE={'variable_cleaning_pos_t1'} VALUE='[{printer.toolhead.position.x}, {printer.toolhead.position.y}]' # Записываем новую позицию X для парковочной зоны
    {% else %}
    RESPOND MSG="Axis XY not homed" # иначе говорим, что оси не паркованы или не выбран экструдер, координаты не переписываются
    {% endif %}

[gcode_macro SAVE_T2_PARK_POSITION]
gcode:
    {% set global = printer["gcode_macro GLOBAL"] %}
    {% if 'x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes%} # Проверяем известно ли положение осей XY и выбран ли экструдер
    SAVE_VARIABLE VARIABLE={'variable_cleaning_pos_t2'} VALUE='[{printer.toolhead.position.x}, {printer.toolhead.position.y}]' # Записываем новую позицию X для парковочной зоны
    {% else %}
    RESPOND MSG="Axis XY not homed" # иначе говорим, что оси не паркованы или не выбран экструдер, координаты не переписываются
    {% endif %}

# [gcode_macro _EXTRUDER_VARIABLES]
# variable_head_switched: False
# gcode:


# Чтение "глобальной переменной"
# {% set head_switched = printer["gcode_macro _EXTRUDER_VARIABLES"].head_switched %}

# Симуляция концевика через присваивания статуса по событиям нажатия/отпускания
# [gcode_button _HEAD_SWITCH]
# pin: PA6
# press_gcode:
#     M118 "Head switched to T1"
#     SET_GCODE_VARIABLE MACRO=_EXTRUDER_VARIABLES VARIABLE=head_switched VALUE={ True }
#     G4 P200
# release_gcode:
#     M118 "Head switched to T0"
#     SET_GCODE_VARIABLE MACRO=_EXTRUDER_VARIABLES VARIABLE=head_switched VALUE={ False }
#     G4 P200

# [gcode_macro CHECK_EXTRUDER]
# gcode:
#     {% if printer.toolhead.extruder == "extruder" %}
#         # Здесь код, который будет выполнен, если выбран extruder
#     {% elif printer.toolhead.extruder == "extruder1" %}
#         # Здесь код, который будет выполнен, если выбран extruder1
#     {% endif %}

[gcode_macro SEARCH_VARS]
description: Search for variables in the "printer" object from Klipper
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}