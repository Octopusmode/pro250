# https://github.com/jschuh/klipper-macros
# Укоротить второй сопливчик, и вообще переделать сопливчики

# FIXME
# Поменять механизм смены сопел. Оффсет не работает как нужно.

# Проверка текущей системы координат
# {% set was_absolute = printer.gcode_move.absolute_coordinates %}
# {% if was_absolute != printer.gcode_move.absolute_coordinates%} G91 {% endif %} # Возвращаем предыдущую систему координат

# Чистка сопла 1, 2
## + Проверяем текущий выбранный инструмент
## + Едем на позицию чистки
## + Если сопло смещено, то выравниваем и нажимаем SAVE_CLEANING_POSITION

# Калибровка стола
## Выбираем точку калибровки
### Подкручиваем стол
## Выбираем сделующую точку калибровки

# + Калибровка смещения сопла
## - Печатаем калибровочный шаблон
## +Вводим SET_XY_OFFSET

# Написать команды T10, T11
## На этих командах топло должно чистится

# Добавить большой ретракт для неактивного сопла во время печати при T0, T1

## Временно ненужное
# {% set t0_z_offset = file.variable_t0_z_offset %}
# Получение текущей координаты и ограничивающей
    # {% set max_z = printer.toolhead.axis_maximum.z|float %}
    # {% set act_z = printer.toolhead.position.z|float %}
# printer.configfile.settings.extruder.rotation_distance : 7.0

[gcode_macro T0]
gcode:
    {% set r_dist = printer.configfile.settings.extruder.rotation_distance|float %}
    {% if printer.toolhead.extruder == "extruder1" %}
        SET_PIN PIN=switch VALUE=0
        # Компенсировать оффсет по Z
        # Компенсировать оффсет по Y
        SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder DISTANCE=r_dist
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0 # TODO использовать отдельный параметр для каждого инструмента
        SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=1 MOVE_SPEED=80
    {% endif %}


[gcode_macro T1]
gcode:
    {% set file = printer.save_variables.variables %}
    {% set x_const_offset = file.variable_nozzles_y_const_offset %}
    {% set x_offset = file.variable_nozzles_offset[0] %}
    {% set y_offset = file.variable_nozzles_offset[1] %}
    {% set t1_z_offset = printer['gcode_macro GLOBAL'].t1_z_offset %}
    {% set r_dist = printer.configfile.settings.extruder.rotation_distance %}
    {% set x_tool_offset = x_const_offset + x_offset %}
    {% set y_tool_offset = y_offset %}
    {% set z_tool_offset = t1_z_offset %}

    {% if printer.toolhead.extruder == "extruder" %}
        SET_PIN PIN=switch VALUE=1
        RESPOND MSG="Offset is X={x_tool_offset} Y={y_tool_offset} Z={z_tool_offset}"
        SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder DISTANCE=r_dist * -1
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0 # TODO использовать отдельный параметр для каждого инструмента
        SET_GCODE_OFFSET X={x_tool_offset} Y={y_offset} Z={z_tool_offset} MOVE=1 MOVE_SPEED=80
    {% endif %}

[gcode_macro _MOVE_TO_CLEANER]
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        {action_respond_info("Printer is not ready")}
    {% else %}
        SAVE_GCODE_STATE NAME=CLEANER
        {% if printer.toolhead.extruder == "extruder" %}
            {% set x = printer.save_variables.variables.variable_t0_cleaning_pos[0] %}
            {% set y = printer.save_variables.variables.variable_t0_cleaning_pos[1] %}
            G90
            G1 X10 Y{y} F6000
            G1 X{x} Y{y} F6000
        {% endif %}
        {% if printer.toolhead.extruder == "extruder1" %}
            {% set x = printer.save_variables.variables.variable_t1_cleaning_pos[0] %}
            {% set y = printer.save_variables.variables.variable_t1_cleaning_pos[1] %}
            G1 X180 Y{y} F6000
            G1 X{x} Y{y} F6000
        {% endif %}

        RESTORE_GCODE_STATE NAME=CLEANER
    {% endif %}

[gcode_macro CLEAN_CURRENT_NOZZLE]
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        {action_respond_info("Printer is not ready")}
    {% else %}
        SAVE_GCODE_STATE NAME=CLEANING
        _MOVE_TO_CLEANER
        _MOVE_CIRCLE
        RESTORE_GCODE_STATE NAME=CLEANING MOVE=1 MOVE_SPEED=120
    {% endif %}

[gcode_macro CIRCLE]
gcode:
    _MOVE_CIRCLE

[gcode_macro _MOVE_CIRCLE]
gcode:
    {% set r = params.R|default(1.5)|float %} # радиус окружности
    {% set n = params.N|default(3)|int %} # количество оборотов
    {% set s = params.S|default(600)|float %} # скорость
    {% set t = params.T|default(None)|float %} # время
    
    {% set x = printer.toolhead.position.x - r/2 %}
    {% set y = printer.toolhead.position.y %}

    SAVE_GCODE_STATE NAME=CLEANING_MOVE
    G90

    {% for i in range(n) %}
        {% if s is not none %}
            G2 X{x} Y{y} I{r} J0 F{s}
        {% elif t is not none %}
            {% set circle_time = t / n %}
            {% set circle_speed = 2 * 3.14159 * r / circle_time %}
            G2 X{x- r/2} Y{y} I{r} J0 F{circle_speed}
        {% else %}
            G2 X{x- r/2} Y{y} I{r} J0
        {% endif %}
    {% endfor %}
    RESTORE_GCODE_STATE NAME=CLEANING_MOVE MOVE=1 MOVE_SPEED=120

[gcode_macro SAVE_CLEANING_POSITION]
gcode:
    {% set global = printer["gcode_macro GLOBAL"] %}
    {% if 'x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes %}
        {% if -15 <= printer.toolhead.position.x < 4 and 0 <= printer.toolhead.position.y < 8 %}
            {% if printer.toolhead.extruder == "extruder" %}
                RESPOND MSG="New pos is {printer.toolhead.position.x|round(2)}, {printer.toolhead.position.y|round(2)}"
                SAVE_VARIABLE VARIABLE={'variable_t0_cleaning_pos'} VALUE='[{printer.toolhead.position.x}, {printer.toolhead.position.y}]'
            {% endif %}
            {% if printer.toolhead.extruder == "extruder1" %}
                RESPOND MSG="New pos is {printer.toolhead.position.x|round(2)}, {printer.toolhead.position.y|round(2)}"
                SAVE_VARIABLE VARIABLE={'variable_t1_cleaning_pos'} VALUE='[{printer.toolhead.position.x}, {printer.toolhead.position.y}]'
            {% endif %}
        {% else %}
            {action_respond_info("Current tool not in cleaner zone")}
        {% endif %}
    
    {% else %}
    RESPOND MSG="Axis XY not homed" # иначе говорим, что оси не паркованы или не выбран экструдер, координаты не переписываются
    {% endif %}
# SAVE_VARIABLE VARIABLE={'t0_cleaning_pos'} VALUE='[{printer.toolhead.position.x}, {printer.toolhead.position.y}]'

[gcode_macro GET_CLEANING_POSITIONS]
gcode:
    t0_pos = printer.save_variables.variables.variable_t0_cleaning_pos
    t1_pos = printer.save_variables.variables.variable_t1_cleaning_pos
    RESPOND MSG="Current cleaning positions is: {t0_pos} and {t1_pos}"

[gcode_macro SET_NOZZLES_OFFSET]
gcode:
    {% set X = params.X %}
    {% set Y = params.Y %}
    {% if -2 <= X <= 2 and -2 <= Y < 2 %}
        SAVE_VARIABLE VARIABLE={'variable_nozzles_offset'} VALUE='[{Y}, {Y}]'
        RESPOND MSG="New nozzles offset saved."
    {% else %}
        {action_respond_info("Value(s) is out of range -2 < value < 2 mm. Changes is not applyed.")}
    {% endif%}

[gcode_macro SEARCH_NOZZLES]
gcode:
    {% set global = printer['gcode_macro GLOBAL'] %}
    {% set homing_pos_x = global.homing_pos_x %}
    {% set homing_pos_y = global.homing_pos_y %}
    G1 X{homing_pos_x} Y{homing_pos_y} Z5
    _MEASURE_OFFSET
    _SET_OFFSET
    G91
    G1 Z5 F300
    G90

[gcode_macro _MEASURE_OFFSET]
gcode:
    T0
    G28 Z
    T1
    PROBE

[gcode_macro _SET_OFFSET]
gcode:
    RESPOND MSG='{printer.probe.last_query}'
    RESPOND MSG='T1 Z offset={printer.probe.last_z_result}'
    SET_GCODE_VARIABLE MACRO=GLOBAL VARIABLE=t1_z_offset VALUE='{printer.probe.last_z_result}'

[gcode_macro _GET_OFFSET]
gcode:
    {% set t1_z_offset = printer['gcode_macro GLOBAL'].t1_z_offset %}
    RESPOND MSG='{t1_z_offset}'

    # Компенсация высоты сопел при переключении
    # {% set t1_z_offset = printer["gcode_macro GLOBAL"] %}
    # SET_GCODE_OFFSET Z={t1_z_offset} MOVE=1 MOVE_SPEED=15

[gcode_macro PRINT_PREPARE]
gcode:
    {% set file = printer.save_variables.variables %}
    FORCE_MOVE STEPPER=stepper_z DISTANCE=4 VELOCITY=15
    T0
    G28 Y
    G1 Y180 F9000
    G28 X
    G1 X110 F9000
    G28 Z
    G1 Z10 F300
    G1 F6000

[gcode_macro QUERY_LAST_Z_OFFSET]
gcode:
    RESPOND MSG="{printer['gcode_macro GLOBAL'].t1_z_offset}"

# [gcode_macro _EXTRUDER_VARIABLES]
# variable_head_switched: False
# gcode:


# Чтение "глобальной переменной"
# {% set head_switched = printer["gcode_macro _EXTRUDER_VARIABLES"].head_switched %}

# Симуляция концевика через присваивания статуса по событиям нажатия/отпускания
# [gcode_button _HEAD_SWITCH]
# pin: PA6
# press_gcode:
#     M118 "Head switched to T1"
#     SET_GCODE_VARIABLE MACRO=_EXTRUDER_VARIABLES VARIABLE=head_switched VALUE={ True }
#     G4 P200
# release_gcode:
#     M118 "Head switched to T0"
#     SET_GCODE_VARIABLE MACRO=_EXTRUDER_VARIABLES VARIABLE=head_switched VALUE={ False }
#     G4 P200

# [gcode_macro CHECK_EXTRUDER]
# gcode:
#     {% if printer.toolhead.extruder == "extruder" %}
#         # Здесь код, который будет выполнен, если выбран extruder
#     {% elif printer.toolhead.extruder == "extruder1" %}
#         # Здесь код, который будет выполнен, если выбран extruder1
#     {% endif %}

[gcode_macro SEARCH_VARS]
description: Search for variables in the "printer" object from Klipper
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro DEBUG]
gcode:
    {% set r_dist = printer.configfile.settings.extruder.rotation_distance|float %}
    RESPOND MSG="Offset is X={r_dist}"